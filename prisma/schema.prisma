generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ad_provider_admob_logs {
  id                    Int           @id
  ad_watch_log_id       Int
  ad_unit_id            String?       @db.VarChar(100)
  response_id           String?       @db.VarChar(100)
  ad_source_name        String?       @db.VarChar(100)
  ad_source_id          String?       @db.VarChar(100)
  ad_source_instance_id String?       @db.VarChar(100)
  campaign_id           String?       @db.VarChar(100)
  latency_ms            Int?
  ad_watch_logs         ad_watch_logs @relation(fields: [ad_watch_log_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "ad_provider_admob_logs_ad_watch_logs_FK")

  @@index([ad_watch_log_id], map: "ad_provider_admob_logs_ad_watch_logs_FK")
}

model ad_watch_logs {
  id                     Int                      @id
  user_id                Int
  mission_log_id         Int
  is_watched             Boolean                  @default(false)
  watch_duration         Int                      @default(0)
  reward_earned          Int                      @default(0)
  watched_at             DateTime                 @default(now()) @db.Timestamp(0)
  ad_provider_admob_logs ad_provider_admob_logs[]
  user_mission_logs      user_mission_logs        @relation(fields: [mission_log_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "ad_watch_logs_user_mission_logs_FK")

  @@index([mission_log_id], map: "ad_watch_logs_user_mission_logs_FK")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model reward_redemptions {
  id                      Int                       @id @default(autoincrement())
  user_id                 Int
  type                    String                    @db.VarChar(50)
  status                  reward_redemptions_status @default(requested)
  amount                  Int
  reward_transaction_id   Int
  requested_at            DateTime                  @default(now()) @db.Timestamp(0)
  completed_at            DateTime?                 @db.Timestamp(0)
  additional_info         String?                   @db.Text
  reward_transaction_logs reward_transaction_logs   @relation(fields: [reward_transaction_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "reward_redemptions_reward_transaction_logs_FK")
  users                   users                     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "reward_redemptions_users_FK")

  @@index([reward_transaction_id], map: "reward_redemptions_reward_transaction_logs_FK")
  @@index([user_id], map: "reward_redemptions_users_FK")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model reward_transaction_logs {
  id                 Int                            @id @default(autoincrement())
  user_id            Int
  type               reward_transaction_logs_type
  source             reward_transaction_logs_source
  source_id          Int?
  amount             Int
  balance_after      Int
  created_at         DateTime                       @default(now()) @db.Timestamp(0)
  expires_at         DateTime                       @db.Timestamp(0)
  reward_redemptions reward_redemptions[]
  users              users                          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "reward_transaction_logs_users_FK")

  @@index([user_id], map: "reward_transaction_logs_users_FK")
}

model user_mission_logs {
  id            Int             @id @default(autoincrement())
  user_id       Int
  is_correct    Boolean         @default(false)
  submitted_at  DateTime        @default(now()) @db.Timestamp(0)
  attempt_count Int             @default(0)
  ad_watch_logs ad_watch_logs[]
  users         users           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_mission_logs_users_FK")

  @@index([user_id], map: "user_mission_logs_users_FK")
}

model user_rewards {
  user_id          Int      @id
  total_reward     Int      @default(0)
  available_reward Int
  updated_at       DateTime @default(now()) @db.Timestamp(0)
  users            users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_rewards_users_FK")
}

model users {
  id                      Int                       @id @default(autoincrement())
  email                   String                    @db.VarChar(100)
  password                String                    @db.VarChar(100)
  phone_number            String                    @db.VarChar(100)
  create_at               DateTime                  @default(now()) @db.Timestamp(0)
  last_login_at           DateTime                  @db.Timestamp(0)
  reward_balance          Int                       @default(0)
  type                    users_type                @default(user)
  reward_redemptions      reward_redemptions[]
  reward_transaction_logs reward_transaction_logs[]
  user_mission_logs       user_mission_logs[]
  user_rewards            user_rewards?
}

enum reward_transaction_logs_type {
  earn
  spend
  expire
}

enum reward_transaction_logs_source {
  ad_reward
  reward_spend
  etc
}

enum reward_redemptions_status {
  requested
  processing
  completed
  rejected
}

enum users_type {
  user
  admin
  developer
}
